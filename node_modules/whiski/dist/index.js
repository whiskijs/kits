var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  install: () => install,
  refresh: () => refresh
});

// src/install/index.ts
var fetch = __toESM(require("node-fetch"));
var import_colors = require("colors");
var import_fs_extra2 = require("fs-extra");
var import_path2 = __toESM(require("path"));

// src/compiler/compile.ts
var babel = __toESM(require("@babel/parser"));
var import_fs_extra = require("fs-extra");
var import_path = __toESM(require("path"));

// lib/normalize.ts
function normalizeUrl(path3) {
  path3 = path3.replace(/\\/g, "/");
  path3 = path3.replace(/https:\//, "https://");
  path3 = path3.replace(/http:\//, "http://");
  return path3;
}

// lib/randomString.ts
function RandomString(length = 8) {
  return (Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)).substring(0, length);
}

// src/compiler/compile.ts
function Compile(code, id, opts) {
  return __async(this, null, function* () {
    const modules = [];
    yield opts.plugins.forEach((plugin) => __async(this, null, function* () {
      if (plugin.resolveConfig)
        plugin.resolveConfig(opts);
      if (plugin.transform)
        code = yield plugin.transform(id, code);
    }));
    try {
      const ast = babel.parse(code, { sourceType: "module", plugins: ["typescript", "jsx"] });
      let replaced = 0;
      yield ast.program.body.forEach((spec) => __async(this, null, function* () {
        if (spec.type === "ImportDeclaration" || spec.type === "ExportNamedDeclaration" || spec.type === "ExportAllDeclaration") {
          if (!spec.source)
            return;
          let isUrl = false;
          let replacement = spec.source.value;
          const rep = normalizeUrl(replacement);
          if (!rep.startsWith("./") && !rep.startsWith("../")) {
            modules.push(rep);
            return;
          }
          try {
            new URL(replacement);
            isUrl = true;
          } catch (e) {
            replacement = (0, import_path.normalize)(replacement);
          }
          if (!isUrl) {
            replacement = (0, import_path.join)(import_path.default.dirname(id), replacement);
          }
          if (!replacement.split("\\").pop().includes(".")) {
            replacement = `${replacement}${import_path.default.extname(id)}`;
          }
          yield install(replacement, opts);
          code = code.substring(0, spec.source.start + 1 + replaced) + replacement + code.substring(spec.source.end - 1 + replaced);
          replaced += replacement.length - spec.source.value.length;
        }
        return code;
      }));
    } catch (e) {
      const cd = RandomString();
      console.log(`${"warn".yellow} couldn't parse code. see code: ./.whiski/.errors/${cd}`);
      (0, import_fs_extra.outputFile)((0, import_path.join)(process.cwd(), "./.whiski/.errors/", cd), `/* ${id} */
${code}`);
    }
    return { code, modules };
  });
}

// src/install/index.ts
var history = [];
function install(url, options) {
  return __async(this, null, function* () {
    if (history.includes(url))
      return;
    options = __spreadValues({
      extension: "js",
      plugins: [],
      debug: false,
      log: true
    }, options);
    const start = performance.now();
    options.plugins.forEach((plugin) => __async(this, null, function* () {
      if (plugin.transformImportUrl)
        url = yield plugin.transformImportUrl(url);
    }));
    const parsed = import_path2.default.parse(url);
    const response = yield fetch.default(url);
    if (options.debug)
      console.log(`${"info".blue} fetching ${url}... ${response.status.toString().green}`);
    if (response.status === 200) {
      history.push(url);
      const code = yield response.text();
      const { modules } = yield Compile(code, url, options);
      (0, import_fs_extra2.outputFileSync)((0, import_path2.join)(process.cwd(), `./.whiski/${new URL(url).pathname}`), code);
      if (options.log) {
        console.log(`${"success".green.bold} install ${normalizeUrl(url).bold} - ${((performance.now() - start) / 100).toFixed(2)}s${modules.length === 0 ? "" : `
\u2514\u2500 failed Modules: ${modules.join(", ")}`.red.bold}`);
      }
    } else if (url.endsWith(`index.${options.extension}`)) {
      return;
    } else if (!history.includes(`${parsed.dir}/${parsed.name}/index.${options.extension}`)) {
      yield install(`${parsed.dir}/${parsed.name}/index.${options.extension}`, options);
      history.push(`${parsed.dir}/${parsed.name}/index.${options.extension}`);
    } else if (!history.includes(url)) {
      if (options.log)
        console.log(`${"failed".red.bold} install ${normalizeUrl(url).bold}`);
    }
    return;
  });
}
function refresh() {
  history = [];
}
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  install,
  refresh
});
